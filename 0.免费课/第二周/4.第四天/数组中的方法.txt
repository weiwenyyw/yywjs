 // 方法的作用  函数返回值   参数  原有数组是否变化
 1.shift
     1.删除数组第一项
     2.删除的那一项值
     3. 不需要参数
     4.原有数组发生改变
 2.unshift
     1.新增数组第一项
     2.新增数组的length
     3.新增数组第一项的值
     4.原有数组发生改变
 3.pop
     1.删除数组的最后一项
     2.删除的最后一项的值
     3.不需要传参数
     4.原有数组发生改变
 4.push
     1.新增数组最后一项
     2.新数组的length
     3.新增数组最后一项的值
     4.原有数组发生变化
 5.splice
     1.splice(m,n) : 从索引m 开始，删除n项
       splice(m) : 从索引m开始，删除到数组的末尾
       splice(x,y,z)  从索引x开始，删除y项，用z替换
       // y =0 ; 就是新增z
     2.返回值就是删除的那几项
     3.需要参数
     4.原有数组发生改变
 6.slice
     1.slice(m,n) 从索引m开始截取，截取到索引n,不包括n(前包后不包)
     2.截取的那几项（数组）
     3.一个参数（截取到数组末尾）两个参数
     4.原有数组不变化
 7.concat : 克隆
     1.把数组拼接到一个大的数组
     2.返回一个新数组
     3.可以是数组，还可以几个值
     4.原有数组不变
 8.join
     1.返回字符串，把数组中每一项按照特定的字符，拼接成字符
     2.返回新的字符串
     3.参数：特定的字符
     4.原有数组不变
 9.sort
     // sort(function(a,b){return a-b}): 从小到大
      // sort(function(a,b){return b-a}): 从大到小
     1. 排序，没有参数只能排10以内的数
     2.返回排好序的数组
     3.可以没有，可以有
     4.原有数组发生变化
 10.reverse
     1. 把数组倒过来排
     2.顺序倒过来的新数组
     3.不需要参数
     4.原有数组发生变化
 11.indexOf
     1.检测数组成员第一次出现的索引位置
     2.返回数组成员第一次出现的索引
     3.要检测的那一项
     4.原有数组不变
 12.lastIndexOf
    1.检测数组成员最后一次出现的索引位置
      2.返回数组成员最后一次出现的索引
      3.要检测的那一项
      4.原有数组不变
 13.map
    1.遍历数组的每一项
    2.undefined
    3.参数是一个函数
    4.原有数组不变
 14.forEach
     1.遍历数组的每一项
     2.undefined
     3.参数是一个函数
     4.原有数组不变



